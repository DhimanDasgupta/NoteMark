import kotlin.Boolean;

CREATE TABLE NoteEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    createdAt TEXT NOT NULL, -- Store as Unix epoch timestamp (milliseconds)
    lastEditedAt TEXT NOT NULL, -- Store as Unix epoch timestamp (milliseconds)
    uuid TEXT NOT NULL UNIQUE, -- Store the ID for the note in a different column
    synced INTEGER AS Boolean NOT NULL DEFAULT 0, -- 0 for false, 1 for true
    markAsDeleted INTEGER AS Boolean NOT NULL DEFAULT 0,  -- 0 for false, 1 for true

    CHECK (synced IN (0,1)),
    CHECK (markAsDeleted IN (0,1))
);

-- Indexes for common query patterns
CREATE INDEX idx_NoteEntity_id ON NoteEntity(id);
CREATE INDEX idx_NoteEntity_modifiedAt ON NoteEntity(lastEditedAt);


--------------------------------------------------------------------------------
-- Note Queries
--------------------------------------------------------------------------------

-- Get all notes, ordered by modification date (newest first)
getAllNotes:
SELECT *
FROM NoteEntity
WHERE markAsDeleted = 0
ORDER BY lastEditedAt DESC;

-- Get all notes which are not saved in Remote, ordered by modification date (newest first)
getAllNonSyncedNotes:
SELECT *
FROM NoteEntity
WHERE synced = 0;

-- Get all notes which are deleted from local by not from Remote, ordered by modification date (newest first)
getAllDeletedNotes:
SELECT *
FROM NoteEntity
WHERE markAsDeleted = 1;

-- Get a specific note by its internal ID
getNoteById:
SELECT *
FROM NoteEntity
WHERE id = :id;

-- Get a specific note by its internal UUID
getNoteByUUID:
SELECT *
FROM NoteEntity
WHERE uuid = :uuid;

-- Insert a new note
-- The 'id' will be auto-generated.
-- 'createdAt' and 'modifiedAt' should be set at the time of insertion.
-- 'uuid' should be generated by your application code.
insertNote:
INSERT OR REPLACE INTO NoteEntity(title, content, createdAt, lastEditedAt, uuid, synced)
VALUES (:title, :content, :createdAt, :lastEditedAt, :uuid, :synced);

-- Update an existing note's title, content, and modifiedAt timestamp
updateNote:
UPDATE NoteEntity
SET
    title = :title,
    content = :content,
    lastEditedAt = :lastEditedAt,
    synced = :synced
WHERE uuid = :uuid;

-- Permanently delete a note (use with caution)
deleteNoteByUUID:
DELETE FROM NoteEntity
WHERE uuid = :uuid;

-- Not Permanetly deleted but will be deleted after next sync
markNoteAsDeletedByUUID:
UPDATE NoteEntity
SET
    markAsDeleted = 1
WHERE uuid = :uuid;

-- Permanently delete all notes
deleteAll:
DELETE --
FROM NoteEntity;